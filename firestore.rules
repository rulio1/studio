
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can be read by anyone, but only the owner can update their own profile.
    // New users are created during registration.
    match /users/{userId} {
      allow read;
      allow update: if isAuthenticated() && isOwner(userId);
      // Deny create and delete for client-side safety.
      allow create, delete: if false;
    }

    // Posts can be read by anyone.
    // Create is allowed for any authenticated user.
    // Update and delete are only allowed by the post author.
    match /posts/{postId} {
      allow read;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
      
      // Allow anyone authenticated to update likes/retweets/views, but not other fields.
      allow update: if isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'retweets', 'views', 'poll']);
    }

    // Comments can be read by anyone.
    // Create is allowed for any authenticated user.
    // Update and delete are only allowed by the comment author.
    match /comments/{commentId} {
      allow read;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    // Notifications can only be read by the recipient and created by anyone authenticated.
    match /notifications/{notificationId} {
      allow read, update: if isAuthenticated() && isOwner(resource.data.toUserId);
      allow create: if isAuthenticated();
      // Deny client-side delete for safety.
      allow delete: if false;
    }

    // Communities can be read by anyone.
    // Creating communities is handled by the client, so any auth'd user can create one.
    // Updating member count is allowed.
    // Deleting a community is not allowed from the client.
    match /communities/{communityId} {
        allow read;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated(); // Allows joining/leaving
        allow delete: if false;
    }
    
    // Hashtags can be read by anyone, and created/updated by any authenticated user (when they post).
    match /hashtags/{hashtagId} {
        allow read;
        allow create, update: if isAuthenticated();
        allow delete: if false;
    }
    
    // Reposts collection
    match /reposts/{repostId} {
        allow read, create, delete: if isAuthenticated();
        allow update: if false;
    }

    // Conversations can only be accessed by participants.
    match /conversations/{conversationId} {
      allow get, list, update: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;

      // Messages within a conversation
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
        allow update, delete: if false; // Don't allow message editing/deletion for now
      }
    }

    // Jobs can be read by anyone. Not created/updated/deleted from client.
    match /jobs/{jobId} {
        allow read;
        allow create, update, delete: if false;
    }
  }
}
